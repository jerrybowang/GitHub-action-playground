name: condiction scan

on:
  push:
    branches:
      - "**"


jobs:

  check-scan-configuration:
    runs-on: ubuntu-latest
    env:
      CONFIG_FILE_PATH: con.config
    outputs:
        should_run: ${{ steps.check-branch.outputs.should_run }}
    steps:
        - name: sparse-checkout the config file
          uses: actions/checkout@v4
          with:
            sparse-checkout: |
              ${{ env.CONFIG_FILE_PATH }}
            sparse-checkout-cone-mode: false

        - name: Read config file for run_on_branches info
          id: read-config
          shell: bash
          run: |
            # check if the config file exists
            if [ -f $CONFIG_FILE_PATH ]; then
                # grab the line
                branch_config=$(grep '^branches=' $CONFIG_FILE_PATH || echo '')

                if [[ -z "$branch_config" ]]; then
                    echo "branches=" >> $GITHUB_OUTPUT
                    echo "no branches config found in config file"
                else
                    echo "$branch_config" >> $GITHUB_OUTPUT
                    echo "$branch_config"
                fi
            else
                echo "Config file not found"
            fi
        
        - name: Check if branch should run
          id: check-branch
          shell: bash
          run: |
            # helper function to convert github action's pattern matching (which is fnmatch) to regex
            # not using fnmatch because it is not available in Github Action runners
            
            convert_to_regex() {
              # escape the following special characters: (){}+|
              local regex_result=$(echo "$1" | sed "s/[(){}+|]/\\\\&/g")

              # convert the branch name to a regex pattern
              # replace . with \.  ;;  * with [^/]*  ;;  ? with .{1}
              # ** will become [^/]*[^/]*  ;; hence the seconde sed command
              regex_result=$(echo "$regex_result" | sed 's/\./\\./g; s/\*/[^\/]*/g; s/\?/.{1}/g')

              # replace [^/]*[^/]*  with .*  ;; this completes ** to .*
              regex_result=$(echo "$regex_result" | sed 's/\[\^\/\]\*\[\^\/\]\*/.*/g')

              # finally, hanle the negation of a character set
              # eg. [!abc] will become [^abc]
              regex_result=$(echo "$regex_result" | sed 's/\[\!/\[\^/g')

              # return the regex
              echo "$regex_result"
            }

            # ----------------- main script -----------------

            # get the current branch name
            current_branch=${GITHUB_REF#refs/heads/}
            echo "current_branch=$current_branch"

            # get the default branch name
            default_branch=${{ github.event.repository.default_branch }}
            echo "default_branch=$default_branch"

            should_run=false
            run_on_branches="${{ steps.read-config.outputs.branches }}"

            # fause safe default: 
            # 1. no matter what the config says, the job should run on the default branch
            # 2. if the config does not exist, the job should run regardless
            
            if [[ "$current_branch" == "$default_branch" ]]; then
                should_run=true
                echo "current branch is the default branch, job will run"
            elif [[ -z "$run_on_branches" ]] ; then
                should_run=true
                echo "no run_on_branches config found in config file, job will run on all branches"
            else
                
                echo "run_on_branches=$run_on_branches"

                # split the run_on_branches list into an array
                IFS=' ' read -r -a branches <<< "$run_on_branches"

                # iterate over the branches
                for branch in "${branches[@]}"; do

                    # convert the github action's branch pattern into regex
                    regex=$(convert_to_regex "$branch")

                    # check if the current branch matches the pattern
                    # the following if block is for Github Actions's negate pattern

                    negate=false
                    # if there is a negte character "!"
                    if [[ $regex =~ ^! ]]; then
                        # remove the "!" character
                        regex=${regex:1}
                        negate=true
                    fi

                    # if the current branch matches the pattern and negate is false, set should_run to true
                    if [[ "$current_branch" =~ ^$regex$ ]] && [[ $negate == false ]]; then
                        should_run=true
                        echo "current branch ($current_branch) matches the pattern: $branch, job will run"
                        break
                    elif [[ $negate == true ]]; then
                        # if the current branch does not match the pattern and negate is true, set should_run to true
                        if [[ "$current_branch" =~ ^$regex$ ]]; then
                            : # do nothing
                            # using this empty if block because regex negation is .... not working as expected
                        else
                            should_run=true
                            echo "current branch ($current_branch) matches the pattern: $branch, job will run"
                            break
                        fi
                    fi
                done
            fi
            
            echo "should_run=$should_run" >> "$GITHUB_OUTPUT"
        




  scan:
    runs-on: ubuntu-latest
    needs: check-scan-configuration
    if: needs.check-scan-configuration.outputs.should_run != 'false'
    steps:
        - name: dummy action
          run: |
            echo "dummy mend scan"
